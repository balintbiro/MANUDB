return(NULL)  # Return NULL if there's an error
})
subresults <- list()
# Check if the ensembl object is NULL
if (is.null(ensembl)) {
return(NA)  # Return NA if there's an error
} else {
# Access the subdf using the value of orgname
subdf <- dfContainer$orgname
for (region in subdf$region_str) {
data <- getBM(
attributes = c('external_gene_name'),
filters = c('chromosomal_region'),
values = region,
mart = ensembl
)
# Check whether the query was successful or not
if (nrow(data) != 0) {
data$reg <- region
data$orgname <- orgname
subresults <- append(subresults, list(data))
} else {
# Include orgname directly in the data frame construction
data <- data.frame(
external_gene_name = NA,
reg = region,
orgname = orgname  # Corrected here
)
subresults <- append(subresults, list(data))
}
}
# Combine subresults into a single data frame and return it
results <- bind_rows(subresults)
return(results)  # Return the combined results
}
}
# Initialize the global results variable
assign("results", list(), envir = .GlobalEnv)
all_results<-list()
counter<-0
for (orgname in orgnames[1:2]){
orgresults <- biomaRt_query(orgname)
all_results[[orgname]] <- orgresults
counter <- counter + 1  # Increment the counter
cat("Processed:", counter,"/",length(orgnames), "\n")  # Print the processed organism
}
all_results
# Function definition for querying biomaRt
biomaRt_query <- function(orgname) {
# Attempt to create the Ensembl Mart object
ensembl <- tryCatch({
useEnsembl(
biomart = "genes",
dataset = sprintf("%s_gene_ensembl", orgname)
)
}, error = function(e) {
return(NULL)  # Return NULL if there's an error
})
subresults <- list()
# Check if the ensembl object is NULL
if (is.null(ensembl)) {
return(NA)  # Return NA if there's an error
} else {
# Access the subdf using the value of orgname
subdf <- dfContainer[[orgname]]
for (region in subdf$region_str) {
data <- getBM(
attributes = c('external_gene_name'),
filters = c('chromosomal_region'),
values = region,
mart = ensembl
)
# Check whether the query was successful or not
if (nrow(data) != 0) {
data$reg <- region
data$orgname <- orgname
subresults <- append(subresults, list(data))
} else {
# Include orgname directly in the data frame construction
data <- data.frame(
external_gene_name = NA,
reg = region,
orgname = orgname  # Corrected here
)
subresults <- append(subresults, list(data))
}
}
# Combine subresults into a single data frame and return it
results <- bind_rows(subresults)
return(results)  # Return the combined results
}
}
# Initialize the global results variable
assign("results", list(), envir = .GlobalEnv)
all_results<-list()
counter<-0
for (orgname in orgnames[1:2]){
orgresults <- biomaRt_query(orgname)
all_results[[orgname]] <- orgresults
counter <- counter + 1  # Increment the counter
cat("Processed:", counter,"/",length(orgnames), "\n")  # Print the processed organism
}
all_results
biomaRt_query("hsapeins")
biomaRt_query("hsapiens")
all_results
# Initialize the global results variable
assign("results", list(), envir = .GlobalEnv)
all_results<-list()
all_results[["hsapiens"]]<-biomaRt_query("hsapiens")
all_results
all_results[["mmusculus"]]<-biomaRt_query("mmusculus")
all_results$mmusculus
dfContainer$mmusculus
length(all_results$mmusculus)
length(all_results$mmusculus$reg)
sleep_time <- runif(1, min = 1, max = 5)
sleep_time
sleep_time <- runif(1, min = 1, max = 5)
sleep_time
orgnames
# Initialize the global results variable
assign("results", list(), envir = .GlobalEnv)
all_results<-list()
counter<-0
for (orgname in orgnames[1:3]){
all_results[[orgname]] <- biomaRt_query(orgname)
counter <- counter + 1  # Increment the counter
cat("Processed:", counter,"/",length(orgnames), "\n")  # Print the processed organism
sleep_time <- runif(1, min = 1, max = 5)
Sys.sleep(sleep_time)
}
all_results$bmusculus
bind_rows(all_results)
bind_rows(all_results,.id="source")
length(all_results)
all_results[1]
all_results[2]
all_results[3]
all_results[!sapply(all_results, is.null)]
# Function definition for querying biomaRt
biomaRt_query <- function(orgname) {
# Attempt to create the Ensembl Mart object
ensembl <- tryCatch({
useEnsembl(
biomart = "genes",
dataset = sprintf("%s_gene_ensembl", orgname)
)
}, error = function(e) {
return(NULL)  # Return NULL if there's an error
})
subresults <- list()
# Check if the ensembl object is NULL
if (is.null(ensembl)) {
data <- data.frame(
external_gene_name = c(NA),
reg = c(NA),
orgname = orgname  # Corrected here
)  # Return NA if there's an error
} else {
# Access the subdf using the value of orgname
subdf <- dfContainer[[orgname]]
for (region in subdf$region_str) {
data <- getBM(
attributes = c('external_gene_name'),
filters = c('chromosomal_region'),
values = region,
mart = ensembl
)
# Check whether the query was successful or not
if (nrow(data) != 0) {
data$reg <- region
data$orgname <- orgname
subresults <- append(subresults, list(data))
} else {
# Include orgname directly in the data frame construction
data <- data.frame(
external_gene_name = c(NA),
reg = c(region),
orgname = c(orgname)  # Corrected here
)
subresults <- append(subresults, list(data))
}
}
# Combine subresults into a single data frame and return it
results <- bind_rows(subresults)
return(results)  # Return the combined results
}
}
# Initialize the global results variable
assign("results", list(), envir = .GlobalEnv)
all_results<-list()
counter<-0
for (orgname in orgnames[1:3]){
all_results[[orgname]] <- biomaRt_query(orgname)
counter <- counter + 1  # Increment the counter
cat("Processed:", counter,"/",length(orgnames), "\n")  # Print the processed organism
sleep_time <- runif(1, min = 1, max = 5)
Sys.sleep(sleep_time)
}
bind_rows(all_results)
# Initialize the global results variable
assign("results", list(), envir = .GlobalEnv)
all_results<-list()
counter<-0
for (orgname in orgnames[1:3]){
all_results[[orgname]] <- biomaRt_query(orgname)
counter <- counter + 1  # Increment the counter
cat("Processed:", counter,"/",length(orgnames), "\n")  # Print the processed organism
sleep_time <- runif(1, min = 1, max = 5)
Sys.sleep(sleep_time)
}
bind_rows(all_results)
# Initialize the global results variable
assign("results", list(), envir = .GlobalEnv)
all_results<-list()
counter<-0
for (orgname in orgnames){
all_results[[orgname]] <- biomaRt_query(orgname)
counter <- counter + 1  # Increment the counter
cat("Processed:", counter,"/",length(orgnames), "\n")  # Print the processed organism
sleep_time <- runif(1, min = 1, max = 5)
Sys.sleep(sleep_time)
}
all_results
rbind(all_results)
bind_rows(all_results)
counter
final<-bind_rows(all_results)
write.csv("intragenicNUMTs.csv",final)
write.csv(x=final,file="intragenicNUMTs.csv")
read.csv("intragenicNUMTs.csv")
orgnames[29]
df<-read.csv("intragenicNUMTs.csv")
unique(df$orgname)
orgnames[29]
orgnames[30:]
orgnames[30:length(orgnames)]
# Initialize the global results variable
assign("results", list(), envir = .GlobalEnv)
all_results<-list()
counter<-0
for (orgname in orgnames[30:length(orgnames)]){
all_results[[orgname]] <- biomaRt_query(orgname)
counter <- counter + 1  # Increment the counter
cat("Processed:", counter,"/",length(orgnames), "\n")  # Print the processed organism
sleep_time <- runif(1, min = 1, max = 5)
Sys.sleep(sleep_time)
}
#set working directory
if (getwd()!="/Users/birobalint/Documents/MANUDB"){
setwd("/Users/birobalint/Documents/MANUDB")
}
#load the regions file
regions<-read.csv("temp_files/regions.csv")
regions$region_str<-paste(regions$chr_name,regions$genomic_start,regions$genomic_end,sep=":")
#get unique names and perform groupby based on orgname
#load the individual dataframes into a common list container
orgnames<-unique(regions$id)
dfContainer<-list()
for (orgname in orgnames)
{
subdf<-regions %>%
group_by(id) %>%
slice(which(id==orgname))
dfContainer[[orgname]]<-subdf
}
# Function definition for querying biomaRt
biomaRt_query <- function(orgname) {
# Attempt to create the Ensembl Mart object
ensembl <- tryCatch({
useEnsembl(
biomart = "genes",
dataset = sprintf("%s_gene_ensembl", orgname)
)
}, error = function(e) {
return(NULL)  # Return NULL if there's an error
})
subresults <- list()
# Check if the ensembl object is NULL
if (is.null(ensembl)) {
data <- data.frame(
external_gene_name = c(NA),
reg = c(NA),
orgname = orgname  # Corrected here
)  # Return NA if there's an error
} else {
# Access the subdf using the value of orgname
subdf <- dfContainer[[orgname]]
for (region in subdf$region_str) {
data <- getBM(
attributes = c('external_gene_name'),
filters = c('chromosomal_region'),
values = region,
mart = ensembl
)
# Check whether the query was successful or not
if (nrow(data) != 0) {
data$reg <- region
data$orgname <- orgname
subresults <- append(subresults, list(data))
} else {
# Include orgname directly in the data frame construction
data <- data.frame(
external_gene_name = c(NA),
reg = c(region),
orgname = c(orgname)  # Corrected here
)
subresults <- append(subresults, list(data))
}
}
# Combine subresults into a single data frame and return it
results <- bind_rows(subresults)
return(results)  # Return the combined results
}
}
# Initialize the global results variable
assign("results", list(), envir = .GlobalEnv)
all_results<-list()
counter<-0
for (orgname in orgnames[30:length(orgnames)]){
all_results[[orgname]] <- biomaRt_query(orgname)
counter <- counter + 1  # Increment the counter
cat("Processed:", counter,"/",length(orgnames), "\n")  # Print the processed organism
sleep_time <- runif(1, min = 1, max = 5)
Sys.sleep(sleep_time)
}
for (orgname in orgnames[31:length(orgnames)]){
all_results[[orgname]] <- biomaRt_query(orgname)
counter <- counter + 1  # Increment the counter
cat("Processed:", counter,"/",length(orgnames), "\n")  # Print the processed organism
sleep_time <- runif(1, min = 1, max = 5)
Sys.sleep(sleep_time)
}
final<-bind_rows(all_results)
final
# Initialize the global results variable
assign("results", list(), envir = .GlobalEnv)
all_results<-list()
for (orgname in orgnames[31:length(orgnames)]){
all_results[[orgname]] <- biomaRt_query(orgname)
counter <- counter + 1  # Increment the counter
cat("Processed:", counter,"/",length(orgnames[31:length(orgnames)]), "\n")  # Print the processed organism
sleep_time <- runif(1, min = 1, max = 5)
Sys.sleep(sleep_time)
}
# Initialize the global results variable
assign("results", list(), envir = .GlobalEnv)
all_results<-list()
counter<-0
for (orgname in orgnames[31:length(orgnames)]){
all_results[[orgname]] <- biomaRt_query(orgname)
counter <- counter + 1  # Increment the counter
cat("Processed:", counter,"/",length(orgnames[31:length(orgnames)]), "\n")  # Print the processed organism
sleep_time <- runif(1, min = 1, max = 5)
Sys.sleep(sleep_time)
}
ensembl <- useEnsembl(
biomart = "genes")
ensembl <- useEnsembl(
biomart = "genes",
dataset = "hsapiens_gene_ensembl")
listAttributes(mart=ensembl,pattern="start")
searchAttributes(mart=ensembl,pattern="start")
searchAttributes(mart=ensembl,pattern="start_position")
searchAttributes(mart=ensembl,pattern="end_position")
searchAttributes(mart=ensembl,pattern="external_gene_name")
# Function definition for querying biomaRt for MT annotations
biomaRt_query <- function(orgname) {
# Attempt to create the Ensembl Mart object
ensembl <- tryCatch({
useEnsembl(
biomart = "genes",
dataset = sprintf("%s_gene_ensembl", orgname)
)
}, error = function(e) {
return(NULL)  # Return NULL if there's an error
})
# Check if the ensembl object is NULL
if (is.null(ensembl)) {
data <- data.frame(
external_gene_name = c(NA),
reg = c(NA),
orgname = orgname  # Corrected here
)  # Return NA if there's an error
} else {
data <- getBM(
attributes = c('external_gene_name',"start_position","end_position"),
filters = c('chromosomal_region'),
values = region,
mart = ensembl
)
}
return(data)
}
biomaRt_query(orgname = "hsapiens")
# Function definition for querying biomaRt for MT annotations
biomaRt_query <- function(orgname) {
# Attempt to create the Ensembl Mart object
ensembl <- tryCatch({
useEnsembl(
biomart = "genes",
dataset = sprintf("%s_gene_ensembl", orgname)
)
}, error = function(e) {
return(NULL)  # Return NULL if there's an error
})
# Check if the ensembl object is NULL
if (is.null(ensembl)) {
data <- data.frame(
external_gene_name = c(NA),
reg = c(NA),
orgname = orgname  # Corrected here
)  # Return NA if there's an error
} else {
data <- getBM(
attributes = c('external_gene_name',"start_position","end_position"),
filters = c('chromosomal_region'),
values = c("MT:1:25000"),
mart = ensembl
)
}
return(data)
}
biomaRt_query(orgname = "hsapiens")
MTannotations<-list()
counter<-0
for (orgname in orgnames){
MTannotations[[orgname]] <- biomaRt_query(orgname)
counter <- counter + 1  # Increment the counter
cat("Processed:", counter,"/",length(orgnames[31:length(orgnames)]), "\n")  # Print the processed organism
sleep_time <- runif(1, min = 1, max = 5)
Sys.sleep(sleep_time)
}
# Function definition for querying biomaRt for MT annotations
biomaRt_query <- function(orgname) {
# Attempt to create the Ensembl Mart object
ensembl <- tryCatch({
useEnsembl(
biomart = "genes",
dataset = sprintf("%s_gene_ensembl", orgname)
)
}, error = function(e) {
return(NULL)  # Return NULL if there's an error
})
# Check if the ensembl object is NULL
if (is.null(ensembl)) {
data <- data.frame(
external_gene_name = c(NA),
reg = c(NA),
orgname = orgname  # Corrected here
)  # Return NA if there's an error
} else {
data <- getBM(
attributes = c('external_gene_name',"start_position","end_position"),
filters = c('chromosomal_region'),
values = c("MT:1:25000"),
mart = ensembl
)
}
return(data)
}
MTannotations<-list()
counter<-0
for (orgname in orgnames){
MTannotations[[orgname]] <- biomaRt_query(orgname)
counter <- counter + 1  # Increment the counter
cat("Processed:", counter,"/",length(orgnames), "\n")  # Print the processed organism
sleep_time <- runif(1, min = 1, max = 5)
Sys.sleep(sleep_time)
}
# Function definition for querying biomaRt for MT annotations
biomaRt_query <- function(orgname) {
# Attempt to create the Ensembl Mart object
ensembl <- tryCatch({
useEnsembl(
biomart = "genes",
dataset = sprintf("%s_gene_ensembl", orgname)
)
}, error = function(e) {
return(NULL)  # Return NULL if there's an error
})
# Check if the ensembl object is NULL
if (is.null(ensembl)) {
data <- data.frame(
external_gene_name = c(NA),
start_position = c(NA),
end_position=c(NA),
orgname = orgname  # Corrected here
)  # Return NA if there's an error
} else {
data <- getBM(
attributes = c('external_gene_name',"start_position","end_position"),
filters = c('chromosomal_region'),
values = c("MT:1:25000"),
mart = ensembl
)
data$orgname<-orgname
}
return(data)
}
MTannotations<-list()
counter<-0
for (orgname in orgnames){
MTannotations[[orgname]] <- biomaRt_query(orgname)
counter <- counter + 1  # Increment the counter
cat("Processed:", counter,"/",length(orgnames), "\n")  # Print the processed organism
sleep_time <- runif(1, min = 1, max = 5)
Sys.sleep(sleep_time)
}
orgnames
biomaRt_query(orgname = "nvison")
